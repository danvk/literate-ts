// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`checker asciidoc checker snapshots "./src/test/inputs/check-jsonc.asciidoc": ./src/test/inputs/check-jsonc.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/check-jsonc.asciidoc
",
    "Found 2 code samples in ./src/test/inputs/check-jsonc.asciidoc",
    "BEGIN #././src/test/inputs/check-jsonc.asciidoc:5 (--filter check-jsonc-5)
",
    "
END #././src/test/inputs/check-jsonc.asciidoc:5 (--- ms)
",
    "BEGIN #././src/test/inputs/check-jsonc.asciidoc:21 (--filter check-jsonc-21)
",
    "ðŸ’¥ ././src/test/inputs/check-jsonc.asciidoc:21: Invalid JSONC: InvalidSymbol,PropertyNameExpected,ValueExpected,InvalidSymbol,UnexpectedEndOfString,ColonExpected,PropertyNameExpected,ValueExpected",
    "
END #././src/test/inputs/check-jsonc.asciidoc:21 (--- ms)
",
    "---- END FILE ./src/test/inputs/check-jsonc.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/check-jsonc.asciidoc",
    "1/1: ././src/test/inputs/check-jsonc.asciidoc: 1/2 ././src/test/inputs/check-jsonc.asciidoc:5",
    "1/1: ././src/test/inputs/check-jsonc.asciidoc: 2/2 ././src/test/inputs/check-jsonc.asciidoc:21",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/commented-sample-with-error.asciidoc": ./src/test/inputs/commented-sample-with-error.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/commented-sample-with-error.asciidoc
",
    "Found 2 code samples in ./src/test/inputs/commented-sample-with-error.asciidoc",
    "BEGIN #././src/test/inputs/commented-sample-with-error.asciidoc:7 (--filter commented-sample-with-error-7)
",
    "ðŸ’¥ ./src/test/inputs/commented-sample-with-error.asciidoc:7:7-12: Unexpected TypeScript error: Type 'string' is not assignable to type 'number'.",
    "const value: number = "123";",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/commented-sample-with-error.asciidoc:7 (--- ms)
",
    "BEGIN #././src/test/inputs/commented-sample-with-error.asciidoc:17 (--filter commented-sample-with-error-17)
",
    "ðŸ’¥ ././src/test/inputs/commented-sample-with-error.asciidoc:17: Unexpected TypeScript error: Type 'string' is not assignable to type 'number'.",
    "const value: number = "123";
console.log(value);
//          ^? const value: number",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/commented-sample-with-error.asciidoc:17 (--- ms)
",
    "---- END FILE ./src/test/inputs/commented-sample-with-error.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/commented-sample-with-error.asciidoc",
    "1/1: ././src/test/inputs/commented-sample-with-error.asciidoc: 1/2 ././src/test/inputs/commented-sample-with-error.asciidoc:7",
    "1/1: ././src/test/inputs/commented-sample-with-error.asciidoc: 2/2 ././src/test/inputs/commented-sample-with-error.asciidoc:17",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/empty-twoslash.asciidoc": ./src/test/inputs/empty-twoslash.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/empty-twoslash.asciidoc
",
    "Found 1 code samples in ./src/test/inputs/empty-twoslash.asciidoc",
    "BEGIN #././src/test/inputs/empty-twoslash.asciidoc:7 (--filter empty-twoslash-7)
",
    "Code passed type checker.",
    "ðŸ’¥ ./src/test/inputs/empty-twoslash.asciidoc:15:1-13: Failed type assertion for \`fetchANumber\`
  Expected: 
    Actual: function fetchANumber(input: RequestInfo, init?: RequestInit | undefined): Promise<number>",
    "  0/1 twoslash type assertions matched.",
    "async function fetchANumber(...args: Parameters<typeof fetch>): Promise<number> {
  const response = await fetch(...args);
  const num = Number(await response.text());
  if (isNaN(num)) {
    throw new Error(\`Response was not a number.\`);
  }
  return num;
}
fetchANumber
// ^?",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/empty-twoslash.asciidoc:7 (--- ms)
",
    "---- END FILE ./src/test/inputs/empty-twoslash.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/empty-twoslash.asciidoc",
    "1/1: ././src/test/inputs/empty-twoslash.asciidoc: 1/1 ././src/test/inputs/empty-twoslash.asciidoc:7",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/equivalent.asciidoc": ./src/test/inputs/equivalent.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/equivalent.asciidoc
",
    "Found 6 code samples in ./src/test/inputs/equivalent.asciidoc",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:8 (--filter equivalent-8)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "  1/1 twoslash type assertions matched.",
    "
END #././src/test/inputs/equivalent.asciidoc:8 (--- ms)
",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:23 (--filter equivalent-23)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: type T2 = keyof Point",
    "    Actual: type T2 = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: type SynthT2 = "x" | "y"",
    "    Actual: type SynthT2 = "x" | "y"",
    "  3/3 twoslash type assertions matched.",
    "
END #././src/test/inputs/equivalent.asciidoc:23 (--- ms)
",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:31 (--filter equivalent-31)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: type T2 = keyof Point",
    "    Actual: type T2 = keyof Point",
    "ðŸ’¥ ./src/test/inputs/equivalent.asciidoc:34:6-13: Failed type assertion for \`SynthT2\`
  Expected: type SynthT2 = "x" | "y" | "z"
    Actual: type SynthT2 = "x" | "y"",
    "  2/3 twoslash type assertions matched.",
    "interface Point {
  x: number;
  y: number;
}

type T = keyof Point;
//   ^? type T = keyof Point
type T2 = keyof Point;
//   ^? type T2 = keyof Point
type Resolve<Raw> = Raw extends Function ? Raw : {[K in keyof Raw]: Raw[K]};
type SynthT2 = Resolve<T2>;
//   ^? type SynthT2 = "x" | "y" | "z"
",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/equivalent.asciidoc:31 (--- ms)
",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:39 (--filter equivalent-39)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: type T2 = keyof Point",
    "    Actual: type T2 = keyof Point",
    "ðŸ’¥ ./src/test/inputs/equivalent.asciidoc:42:6-13: Failed type assertion for \`SynthT2\`
  Expected: type SynthT2 = "x" | "y" | "z"
    Actual: type SynthT2 = "x" | "y"",
    "  2/3 twoslash type assertions matched.",
    "interface Point {
  x: number;
  y: number;
}

type T = keyof Point;
//   ^? type T = keyof Point
type T2 = keyof Point;
//   ^? type T2 = keyof Point
type Resolve<Raw> = Raw extends Function ? Raw : {[K in keyof Raw]: Raw[K]};
type SynthT2 = Resolve<T2>;
//   ^? type SynthT2 = "x" | "y" | "z"
",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/equivalent.asciidoc:39 (--- ms)
",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:48 (--filter equivalent-48)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: let k: keyof Point",
    "    Actual: let k: keyof Point",
    "Twoslash type assertion match:",
    "  Expected: type SynthK = "x" | "y"",
    "    Actual: type SynthK = "x" | "y"",
    "  3/3 twoslash type assertions matched.",
    "
END #././src/test/inputs/equivalent.asciidoc:48 (--- ms)
",
    "BEGIN #././src/test/inputs/equivalent.asciidoc:60 (--filter equivalent-60)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: type T = keyof Point",
    "    Actual: type T = keyof Point",
    "Twoslash type assertion match:",
    "  Expected: let k: keyof Point",
    "    Actual: let k: keyof Point",
    "ðŸ’¥ ./src/test/inputs/equivalent.asciidoc:67:6-12: Failed type assertion for \`SynthK\`
  Expected: type SynthK = "x" | "y" | "z"
    Actual: type SynthK = "x" | "y"",
    "  2/3 twoslash type assertions matched.",
    "interface Point {
  x: number;
  y: number;
}

type T = keyof Point;
//   ^? type T = keyof Point
function foo(pt: Point) {
  let k: keyof Point;
  for (k in pt) {
    // ^? let k: keyof Point
  }
}
type Resolve<Raw> = Raw extends Function ? Raw : {[K in keyof Raw]: Raw[K]};
type SynthK = Resolve<keyof Point>;
//   ^? type SynthK = "x" | "y" | "z"
",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/equivalent.asciidoc:60 (--- ms)
",
    "---- END FILE ./src/test/inputs/equivalent.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/equivalent.asciidoc",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 1/6 ././src/test/inputs/equivalent.asciidoc:8",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 2/6 ././src/test/inputs/equivalent.asciidoc:23",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 3/6 ././src/test/inputs/equivalent.asciidoc:31",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 4/6 ././src/test/inputs/equivalent.asciidoc:39",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 5/6 ././src/test/inputs/equivalent.asciidoc:48",
    "1/1: ././src/test/inputs/equivalent.asciidoc: 6/6 ././src/test/inputs/equivalent.asciidoc:60",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/express.asciidoc": ./src/test/inputs/express.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/express.asciidoc
",
    "Found 2 code samples in ./src/test/inputs/express.asciidoc",
    "BEGIN #././src/test/inputs/express.asciidoc:8 (--filter express-8)
",
    "Copied CWD/node_modules/@types/express -> TMPDIR/node_modules/@types/express",
    "Copied CWD/node_modules/@types/body-parser -> TMPDIR/node_modules/@types/body-parser",
    "Copied CWD/node_modules/@types/express-serve-static-core -> TMPDIR/node_modules/@types/express-serve-static-core",
    "Copied CWD/node_modules/@types/qs -> TMPDIR/node_modules/@types/qs",
    "Copied CWD/node_modules/@types/serve-static -> TMPDIR/node_modules/@types/serve-static",
    "Copied CWD/node_modules/@types/connect -> TMPDIR/node_modules/@types/connect",
    "Copied CWD/node_modules/@types/node -> TMPDIR/node_modules/@types/node",
    "Copied CWD/node_modules/@types/range-parser -> TMPDIR/node_modules/@types/range-parser",
    "Copied CWD/node_modules/@types/send -> TMPDIR/node_modules/@types/send",
    "Copied CWD/node_modules/@types/http-errors -> TMPDIR/node_modules/@types/http-errors",
    "Copied CWD/node_modules/@types/mime -> TMPDIR/node_modules/@types/mime",
    "Copied CWD/node_modules/undici-types -> TMPDIR/node_modules/undici-types",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const app: Express",
    "    Actual: const app: Express",
    "  1/1 twoslash type assertions matched.",
    "
END #././src/test/inputs/express.asciidoc:8 (--- ms)
",
    "BEGIN #././src/test/inputs/express.asciidoc:16 (--filter express-16)
",
    "Copied CWD/node_modules/@types/express -> TMPDIR/node_modules/@types/express",
    "Copied CWD/node_modules/@types/body-parser -> TMPDIR/node_modules/@types/body-parser",
    "Copied CWD/node_modules/@types/express-serve-static-core -> TMPDIR/node_modules/@types/express-serve-static-core",
    "Copied CWD/node_modules/@types/qs -> TMPDIR/node_modules/@types/qs",
    "Copied CWD/node_modules/@types/serve-static -> TMPDIR/node_modules/@types/serve-static",
    "Copied CWD/node_modules/@types/connect -> TMPDIR/node_modules/@types/connect",
    "Copied CWD/node_modules/@types/node -> TMPDIR/node_modules/@types/node",
    "Copied CWD/node_modules/@types/range-parser -> TMPDIR/node_modules/@types/range-parser",
    "Copied CWD/node_modules/@types/send -> TMPDIR/node_modules/@types/send",
    "Copied CWD/node_modules/@types/http-errors -> TMPDIR/node_modules/@types/http-errors",
    "Copied CWD/node_modules/@types/mime -> TMPDIR/node_modules/@types/mime",
    "Copied CWD/node_modules/undici-types -> TMPDIR/node_modules/undici-types",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const app: Express",
    "    Actual: const app: Express",
    "Twoslash type assertion match:",
    "  Expected: (parameter) request: Request<...>",
    "    Actual: (parameter) request: Request<{}, any, any, QueryString.ParsedQs, Record<string, any>>",
    "Twoslash type assertion match:",
    "  Expected: (parameter) response: Response<...>",
    "    Actual: (parameter) response: Response<any, Record<string, any>, number>",
    "  3/3 twoslash type assertions matched.",
    "
END #././src/test/inputs/express.asciidoc:16 (--- ms)
",
    "---- END FILE ./src/test/inputs/express.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/express.asciidoc",
    "1/1: ././src/test/inputs/express.asciidoc: 1/2 ././src/test/inputs/express.asciidoc:8",
    "1/1: ././src/test/inputs/express.asciidoc: 2/2 ././src/test/inputs/express.asciidoc:16",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/issue-235.asciidoc": ./src/test/inputs/issue-235.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/issue-235.asciidoc
",
    "Found 1 code samples in ./src/test/inputs/issue-235.asciidoc",
    "BEGIN #././src/test/inputs/issue-235.asciidoc:5 (--filter issue-235-5)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const numArgsBad: (...args: any) => any",
    "    Actual: const numArgsBad: (...args: any) => any",
    "ðŸ’¥ ./src/test/inputs/issue-235.asciidoc:7:7-20: Failed type assertion for \`numArgsBetter\`
  Expected: const numArgsBetter: (...args: any) => numberjsdklfjklsd
    Actual: const numArgsBetter: (...args: any[]) => number",
    "  1/2 twoslash type assertions matched.",
    "const numArgsBad = (...args: any) => args.length;
//    ^? const numArgsBad: (...args: any) => any
const numArgsBetter = (...args: any[]) => args.length;
//    ^? const numArgsBetter: (...args: any) => numberjsdklfjklsd",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/issue-235.asciidoc:5 (--- ms)
",
    "---- END FILE ./src/test/inputs/issue-235.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/issue-235.asciidoc",
    "1/1: ././src/test/inputs/issue-235.asciidoc: 1/1 ././src/test/inputs/issue-235.asciidoc:5",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/node-output.asciidoc": ./src/test/inputs/node-output.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/node-output.asciidoc
",
    "Found 3 code samples in ./src/test/inputs/node-output.asciidoc",
    "BEGIN #././src/test/inputs/node-output.asciidoc:8 (--filter node-output-8)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const xs: number[]",
    "    Actual: const xs: number[]",
    "Twoslash type assertion match:",
    "  Expected: const x: number",
    "    Actual: const x: number",
    "  2/2 twoslash type assertions matched.",
    "
END #././src/test/inputs/node-output.asciidoc:8 (--- ms)
",
    "BEGIN #././src/test/inputs/node-output.asciidoc:16 (--filter unsound-code)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const xs: number[]",
    "    Actual: const xs: number[]",
    "Twoslash type assertion match:",
    "  Expected: const x: number",
    "    Actual: const x: number",
    "  2/2 twoslash type assertions matched.",
    "Node exited with error 1 on unsound-code.js",
    "
END #././src/test/inputs/node-output.asciidoc:16 (--- ms)
",
    "BEGIN #././src/test/inputs/node-output.asciidoc:24 (--filter unsound-code-output)
",
    "Actual output matched expected.",
    "
END #././src/test/inputs/node-output.asciidoc:24 (--- ms)
",
    "---- END FILE ./src/test/inputs/node-output.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/node-output.asciidoc",
    "1/1: ././src/test/inputs/node-output.asciidoc: 1/3 ././src/test/inputs/node-output.asciidoc:8",
    "1/1: ././src/test/inputs/node-output.asciidoc: 2/3 ././src/test/inputs/node-output.asciidoc:16",
    "1/1: ././src/test/inputs/node-output.asciidoc: 3/3 ././src/test/inputs/node-output.asciidoc:24",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/prepend-and-skip.asciidoc": ./src/test/inputs/prepend-and-skip.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/prepend-and-skip.asciidoc
",
    "Found 2 code samples in ./src/test/inputs/prepend-and-skip.asciidoc",
    "BEGIN #././src/test/inputs/prepend-and-skip.asciidoc:13 (--filter prepend-and-skip-13)
",
    "matched errors:",
    "  expected:  Cannot redeclare block-scoped variable 'shared'. b.ts",
    "    actual: Cannot redeclare block-scoped variable 'shared'.",
    "  error messages could not be matched!",
    "matched errors:",
    "  expected:  Cannot redeclare block-scoped variable 'shared'.",
    "    actual: Cannot redeclare block-scoped variable 'shared'.",
    "  error messages could not be matched!",
    "Matched 2/2 errors.",
    "
END #././src/test/inputs/prepend-and-skip.asciidoc:13 (--- ms)
",
    "---- END FILE ./src/test/inputs/prepend-and-skip.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/prepend-and-skip.asciidoc",
    "1/1: ././src/test/inputs/prepend-and-skip.asciidoc: 1/2 ././src/test/inputs/prepend-and-skip.asciidoc:6",
    "1/1: ././src/test/inputs/prepend-and-skip.asciidoc: 2/2 ././src/test/inputs/prepend-and-skip.asciidoc:13",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/prepend-as-file.asciidoc": ./src/test/inputs/prepend-as-file.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/prepend-as-file.asciidoc
",
    "Found 6 code samples in ./src/test/inputs/prepend-as-file.asciidoc",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:10 (--filter prepend-as-file-10)
",
    "Code passed type checker.",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:10 (--- ms)
",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:21 (--filter prepend-as-file-21)
",
    "matched errors:",
    "  expected: Object literal may only specify known properties, and 'z' does not exist in type 'Point'.",
    "    actual: Object literal may only specify known properties, and 'z' does not exist in type 'Point'.",
    "  error messages match: perfect",
    "Matched 1/1 errors.",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:21 (--- ms)
",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:36 (--filter prepend-as-file-36)
",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:36 (--- ms)
",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:52 (--filter prepend-as-file-52)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: (property) "year": number",
    "    Actual: (property) "year": number",
    "Twoslash type assertion match:",
    "  Expected: (property) "months": string[]",
    "    Actual: (property) "months": string[]",
    "  2/2 twoslash type assertions matched.",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:52 (--- ms)
",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:65 (--filter prepend-as-file-65)
",
    "Code passed type checker.",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:65 (--- ms)
",
    "BEGIN #././src/test/inputs/prepend-as-file.asciidoc:78 (--filter prepend-as-file-78)
",
    "matched errors:",
    "  expected: '"vanilla"' is not assignable to parameter of type 'Flavor'",
    "    actual: Argument of type '"vanilla"' is not assignable to parameter of type 'Flavor'.",
    "  error messages match: subset",
    "Matched 1/1 errors.",
    "
END #././src/test/inputs/prepend-as-file.asciidoc:78 (--- ms)
",
    "---- END FILE ./src/test/inputs/prepend-as-file.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 1/6 ././src/test/inputs/prepend-as-file.asciidoc:10",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 2/6 ././src/test/inputs/prepend-as-file.asciidoc:21",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 3/6 ././src/test/inputs/prepend-as-file.asciidoc:36",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 4/6 ././src/test/inputs/prepend-as-file.asciidoc:52",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 5/6 ././src/test/inputs/prepend-as-file.asciidoc:65",
    "1/1: ././src/test/inputs/prepend-as-file.asciidoc: 6/6 ././src/test/inputs/prepend-as-file.asciidoc:78",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/president.asciidoc": ./src/test/inputs/president.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/president.asciidoc
",
    "Found 2 code samples in ./src/test/inputs/president.asciidoc",
    "BEGIN #././src/test/inputs/president.asciidoc:7 (--filter president-7)
",
    "Code passed type checker.",
    "ðŸ’¥ ./src/test/inputs/president.asciidoc:9:7-16: Failed type assertion for \`president\`
  Expected: const president: { first: string; last: string; middle?: string; }
    Actual: const president: {
    middle?: string | undefined;
    first: string;
    last: string;
}",
    "  0/1 twoslash type assertions matched.",
    "declare let hasMiddle: boolean;
const firstLast = {first: 'Harry', last: 'Truman'};
const president = {...firstLast, ...(hasMiddle ? {middle: 'S'} : {})};
//    ^? const president: {
//         first: string;
//         last: string;
//         middle?: string;
//       }",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/president.asciidoc:7 (--- ms)
",
    "BEGIN #././src/test/inputs/president.asciidoc:21 (--filter president-21)
",
    "Code passed type checker.",
    "ðŸ’¥ ./src/test/inputs/president.asciidoc:23:7-16: Failed type assertion for \`const president = {...firstLast, ...(hasMiddle ? {middle: 'S'} : {})};\` (tested \`president\`)
  Expected: { first: string; last: string; middle?: string; }
    Actual: { middle?: string | undefined; first: string; last: string; }",
    "  0/1 type assertions matched.",
    "declare let hasMiddle: boolean;
const firstLast = {first: 'Harry', last: 'Truman'};
const president = {...firstLast, ...(hasMiddle ? {middle: 'S'} : {})};
// Type is { first: string; last: string; middle?: string; }",
    "tsconfig options: {"strictNullChecks":true,"module":1,"esModuleInterop":true}",
    "
END #././src/test/inputs/president.asciidoc:21 (--- ms)
",
    "---- END FILE ./src/test/inputs/president.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/president.asciidoc",
    "1/1: ././src/test/inputs/president.asciidoc: 1/2 ././src/test/inputs/president.asciidoc:7",
    "1/1: ././src/test/inputs/president.asciidoc: 2/2 ././src/test/inputs/president.asciidoc:21",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/program-listing.asciidoc": ./src/test/inputs/program-listing.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/program-listing.asciidoc
",
    "Found 5 code samples in ./src/test/inputs/program-listing.asciidoc",
    "BEGIN #././src/test/inputs/program-listing.asciidoc:4 (--filter program-listing-4)
",
    "Node session matched program listing.",
    "
END #././src/test/inputs/program-listing.asciidoc:4 (--- ms)
",
    "BEGIN #././src/test/inputs/program-listing.asciidoc:17 (--filter program-listing-17)
",
    "Code passed type checker.",
    "
END #././src/test/inputs/program-listing.asciidoc:17 (--- ms)
",
    "BEGIN #././src/test/inputs/program-listing.asciidoc:24 (--filter program-listing-24)
",
    "ðŸ’¥ ././src/test/inputs/program-listing.asciidoc:24: Node session did not match program listing.
  - 0
  + 0
  - [ 0, -73.979 ]
  + [ 0, -74.2692 ]",
    "
END #././src/test/inputs/program-listing.asciidoc:24 (--- ms)
",
    "BEGIN #././src/test/inputs/program-listing.asciidoc:40 (--filter program-listing-40)
",
    "ðŸ’¥ ././src/test/inputs/program-listing.asciidoc:40: Node session did not match program listing.
  - "Capuchin"
  + 'Capuchin'
  - "Capuchi"
  + 'Capuchin'",
    "
END #././src/test/inputs/program-listing.asciidoc:40 (--- ms)
",
    "BEGIN #././src/test/inputs/program-listing.asciidoc:49 (--filter program-listing-49)
",
    "Node session matched program listing.",
    "
END #././src/test/inputs/program-listing.asciidoc:49 (--- ms)
",
    "---- END FILE ./src/test/inputs/program-listing.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/program-listing.asciidoc",
    "1/1: ././src/test/inputs/program-listing.asciidoc: 1/5 ././src/test/inputs/program-listing.asciidoc:4",
    "1/1: ././src/test/inputs/program-listing.asciidoc: 2/5 ././src/test/inputs/program-listing.asciidoc:17",
    "1/1: ././src/test/inputs/program-listing.asciidoc: 3/5 ././src/test/inputs/program-listing.asciidoc:24",
    "1/1: ././src/test/inputs/program-listing.asciidoc: 4/5 ././src/test/inputs/program-listing.asciidoc:40",
    "1/1: ././src/test/inputs/program-listing.asciidoc: 5/5 ././src/test/inputs/program-listing.asciidoc:49",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/top-level-await.asciidoc": ./src/test/inputs/top-level-await.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/top-level-await.asciidoc
",
    "Found 1 code samples in ./src/test/inputs/top-level-await.asciidoc",
    "BEGIN #././src/test/inputs/top-level-await.asciidoc:8 (--filter top-level-await-8)
",
    "Code passed type checker.",
    "Twoslash type assertion match:",
    "  Expected: const resource: number",
    "    Actual: const resource: number",
    "  1/1 twoslash type assertions matched.",
    "
END #././src/test/inputs/top-level-await.asciidoc:8 (--- ms)
",
    "---- END FILE ./src/test/inputs/top-level-await.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/top-level-await.asciidoc",
    "1/1: ././src/test/inputs/top-level-await.asciidoc: 1/1 ././src/test/inputs/top-level-await.asciidoc:8",
  ],
}
`;

exports[`checker asciidoc checker snapshots "./src/test/inputs/twoslash-assertion.asciidoc": ./src/test/inputs/twoslash-assertion.asciidoc 1`] = `
{
  "logs": [
    "---- BEGIN FILE ./src/test/inputs/twoslash-assertion.asciidoc
",
    "Found 1 code samples in ./src/test/inputs/twoslash-assertion.asciidoc",
    "BEGIN #././src/test/inputs/twoslash-assertion.asciidoc:5 (--filter twoslash-assertion-5)
",
    "Code passed type checker.",
    "Type assertion match:",
    "  Expected: 2",
    "    Actual: 2",
    "  1/1 type assertions matched.",
    "Twoslash type assertion match:",
    "  Expected: const one: 1",
    "    Actual: const one: 1",
    "  1/1 twoslash type assertions matched.",
    "
END #././src/test/inputs/twoslash-assertion.asciidoc:5 (--- ms)
",
    "---- END FILE ./src/test/inputs/twoslash-assertion.asciidoc
",
  ],
  "statuses": [
    "1/1: ././src/test/inputs/twoslash-assertion.asciidoc",
    "1/1: ././src/test/inputs/twoslash-assertion.asciidoc: 1/1 ././src/test/inputs/twoslash-assertion.asciidoc:5",
  ],
}
`;

exports[`extractSamples snapshot: backticks 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function greet(who: string) {
  console.log('Hello', who);
}",
    "descriptor": "./backticks.asciidoc:3",
    "id": "greet-ts",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 4,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "backticks.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "export const Example = () => <div />;",
    "descriptor": "./backticks.asciidoc:12",
    "id": "greet-tsx",
    "isTSX": false,
    "language": "tsx",
    "lineNumber": 13,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "backticks.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "console.log("end of file");",
    "descriptor": "./backticks.asciidoc:27",
    "id": "backticks-27",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 26,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "backticks.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: backticks-disabled 1`] = `[]`;

exports[`extractSamples snapshot: check-jsonc 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// data.json
{
  "year": 2023,
  "months": [
    "Jan",
    "Feb",
    /* ... */
    "Dec"
  ]
}",
    "descriptor": "./check-jsonc.asciidoc:5",
    "id": "check-jsonc-5",
    "isTSX": false,
    "language": "json",
    "lineNumber": 4,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "check-jsonc.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "{
  year: 2023,
  months": [
    "Jan",
  ]
}",
    "descriptor": "./check-jsonc.asciidoc:21",
    "id": "check-jsonc-21",
    "isTSX": false,
    "language": "json",
    "lineNumber": 20,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "check-jsonc.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: commented-sample 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function somethingDangerous() {}",
    "descriptor": "./commented-sample.asciidoc:7",
    "id": "commented-sample-7",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 6,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "commented-sample.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "let val = null;  // Type is any
try {
  somethingDangerous();
  val = 12;
  val  // Type is number
} catch (e) {
  console.warn('alas!');
}
val  // Type is number | null",
    "descriptor": "./commented-sample.asciidoc:13",
    "id": "commented-sample-13",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 12,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "commented-sample-7",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "commented-sample.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: commented-sample-with-error 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const value: number = "123";",
    "descriptor": "./commented-sample-with-error.asciidoc:7",
    "id": "commented-sample-with-error-7",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 6,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "commented-sample-with-error.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "console.log(value);
//          ^? const value: number",
    "descriptor": "./commented-sample-with-error.asciidoc:17",
    "id": "commented-sample-with-error-17",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 16,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "commented-sample-with-error-7",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "commented-sample-with-error.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: doc1 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function greet(who: string) {
  console.log('Hello', who);
}",
    "descriptor": "./doc1.asciidoc:3",
    "id": "greet-ts",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 5,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "doc1.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: empty-twoslash 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "async function fetchANumber(...args: Parameters<typeof fetch>): Promise<number> {
  const response = await fetch(...args);
  const num = Number(await response.text());
  if (isNaN(num)) {
    throw new Error(\`Response was not a number.\`);
  }
  return num;
}
fetchANumber
// ^?",
    "descriptor": "./empty-twoslash.asciidoc:7",
    "id": "empty-twoslash-7",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 6,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "empty-twoslash.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: equivalent 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "interface Point {
  x: number;
  y: number;
}

type T = keyof Point;
//   ^? type T = keyof Point",
    "descriptor": "./equivalent.asciidoc:8",
    "id": "equivalent-8",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 7,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type T2 = keyof Point;
//   ^? type T2 = keyof Point (equivalent to "x" | "y")",
    "descriptor": "./equivalent.asciidoc:23",
    "id": "equivalent-23",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 22,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "equivalent-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type T2 = keyof Point;
//   ^? type T2 = keyof Point (equivalent to "x" | "y" | "z")",
    "descriptor": "./equivalent.asciidoc:31",
    "id": "equivalent-31",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 30,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "equivalent-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type T2 = keyof Point;
//   ^? type T2 = keyof Point
//      (equivalent to "x" | "y" | "z")",
    "descriptor": "./equivalent.asciidoc:39",
    "id": "equivalent-39",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 38,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "equivalent-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function foo(pt: Point) {
  let k: keyof Point;
  for (k in pt) {
    // ^? let k: keyof Point (equivalent to "x" | "y")
  }
}",
    "descriptor": "./equivalent.asciidoc:48",
    "id": "equivalent-48",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 47,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "equivalent-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function foo(pt: Point) {
  let k: keyof Point;
  for (k in pt) {
    // ^? let k: keyof Point (equivalent to "x" | "y" | "z")
  }
}",
    "descriptor": "./equivalent.asciidoc:60",
    "id": "equivalent-60",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 59,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "equivalent-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "equivalent.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: express 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "import express from 'express';
const app = express();
//    ^? const app: Express",
    "descriptor": "./express.asciidoc:8",
    "id": "express-8",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 7,
    "nodeModules": [
      "@types/express",
    ],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "express.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// Don't do this:
app.get('/health', (request: express.Request, response: express.Response) => {
  response.send('OK');
});

// Do this:
app.get('/health', (request, response) => {
  //                ^? (parameter) request: Request<...>
  response.send('OK');
  // ^? (parameter) response: Response<...>
});",
    "descriptor": "./express.asciidoc:16",
    "id": "express-16",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 15,
    "nodeModules": [
      "@types/express",
    ],
    "prefixes": [
      {
        "id": "express-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "express.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: inline-replacement 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function calculateAge(birthDate: Date): number {
  // ...
}",
    "descriptor": "./inline-replacement.asciidoc:6",
    "id": "inline-replacement-6",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 5,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": "calculate-age-replacement",
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "inline-replacement.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function calculateAge(birthDate: Date): number {
  // COMPRESS
  return 0;
  // END
}",
    "descriptor": "./inline-replacement.asciidoc:12",
    "id": "calculate-age-replacement",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 14,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "inline-replacement.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function calculateAge(birthDate: string): number {
  // ...
}",
    "descriptor": "./inline-replacement.asciidoc:28",
    "id": "inline-replacement-28",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 27,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": "calculate-age-replacement",
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "inline-replacement.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: issue-235 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const numArgsBad = (...args: any) => args.length;
//    ^? const numArgsBad: (...args: any) => any
const numArgsBetter = (...args: any[]) => args.length;
//    ^? const numArgsBetter: (...args: any) => numberjsdklfjklsd",
    "descriptor": "./issue-235.asciidoc:5",
    "id": "issue-235-5",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 4,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "issue-235.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: multilinetype 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const o = {x: 1, y: 2};
// type is {
//   x: number;
//   y: number;
// }",
    "descriptor": "./multilinetype.asciidoc:4",
    "id": "multilinetype-4",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 3,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "multilinetype.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "function addWithExtras(a: number, b: number) {
  const c = a + b;  // type is number
  // ...
  return c;
}",
    "descriptor": "./multilinetype.asciidoc:14",
    "id": "multilinetype-14",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 13,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "multilinetype.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const o = {x: 1, y: 2};
//    ^? const o: {
//         x: number;
//         y: number;
//       }",
    "descriptor": "./multilinetype.asciidoc:25",
    "id": "multilinetype-25",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 24,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "multilinetype.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const o = {x: 1, y: 2};
//    ^? const o: { x: number; y: number; }
//    this comment applies to the next line.
const p = o;",
    "descriptor": "./multilinetype.asciidoc:37",
    "id": "multilinetype-37",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 36,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "multilinetype.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: node-output 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const xs = [0, 1, 2];
//    ^? const xs: number[]
const x = xs[3];
//    ^? const x: number",
    "descriptor": "./node-output.asciidoc:8",
    "id": "node-output-8",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 7,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "node-output.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "console.log(x.toFixed(1));",
    "descriptor": "./node-output.asciidoc:16",
    "id": "unsound-code",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 18,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "node-output-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "node-output.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "console.log(x.toFixed(1));
              ^

TypeError: Cannot read properties of undefined (reading 'toFixed')",
    "descriptor": "./node-output.asciidoc:24",
    "id": "unsound-code-output",
    "isTSX": false,
    "language": null,
    "lineNumber": 25,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "node-output-8",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "node-output.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: noid 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "console.log('Hello', 'TS');",
    "descriptor": "./noid.asciidoc:10",
    "id": "noid-10",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 9,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "noid.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: prepend 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type AB = 'a' | 'b';",
    "descriptor": "./prepend.asciidoc:2",
    "id": "prefix",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 4,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const a: AB = 'a';",
    "descriptor": "./prepend.asciidoc:8",
    "id": "combined",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 10,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prefix",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const a: AB = 'a';",
    "descriptor": "./prepend.asciidoc:16",
    "id": "final",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 18,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: prepend-and-skip 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// a.ts
const shared = "Cher";
//    ~~~~~~
// Cannot redeclare block-scoped variable 'shared'.",
    "descriptor": "./prepend-and-skip.asciidoc:6",
    "id": "prepend-and-skip-6",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 5,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": true,
    "sourceFile": "prepend-and-skip.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// b.ts
const shared = "Cher";
//    ~~~~~~
// Cannot redeclare block-scoped variable 'shared'.",
    "descriptor": "./prepend-and-skip.asciidoc:13",
    "id": "prepend-and-skip-13",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 12,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-and-skip-6",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-and-skip.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: prepend-as-file 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// point.ts
export interface Point {
  x: number;
  y: number;
}",
    "descriptor": "./prepend-as-file.asciidoc:10",
    "id": "prepend-as-file-10",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 9,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": "point.ts",
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "import { Point } from './point';
const pt: Point = {
    x: 3,
    y: 4,
    z: 5,
//  ~ Object literal may only specify known properties, and 'z' does not exist in type 'Point'.
}",
    "descriptor": "./prepend-as-file.asciidoc:21",
    "id": "prepend-as-file-21",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 20,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-as-file-10",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "// data.json
{
  "year": 2023,
  "months": [
    "Jan",
    "Feb",
    /* ... */
    "Dec"
  ]
}",
    "descriptor": "./prepend-as-file.asciidoc:36",
    "id": "prepend-as-file-36",
    "isTSX": false,
    "language": "json",
    "lineNumber": 35,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": "data.json",
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "import data from './data.json';
console.log(data.year);
//               ^? (property) "year": number
console.log(data.months);
//               ^? (property) "months": string[]",
    "descriptor": "./prepend-as-file.asciidoc:52",
    "id": "prepend-as-file-52",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 51,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-as-file-36",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": null,
    "tsOptions": {
      "esModuleInterop": true,
      "resolveJsonModule": true,
    },
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "declare module 'ice-cream' {
  export enum Flavor {
    VANILLA = 'vanilla',
    CHOCOLATE = 'chocolate',
    STRAWBERRY = 'strawberry',
  }

  export function scoop(flavor: Flavor): void;
}",
    "descriptor": "./prepend-as-file.asciidoc:65",
    "id": "prepend-as-file-65",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 64,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": "ice-cream.d.ts",
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "import {scoop} from 'ice-cream';

scoop('vanilla');
//    ~~~~~~~~~ '"vanilla"' is not assignable to parameter of type 'Flavor'

import {Flavor} from 'ice-cream';
scoop(Flavor.VANILLA);  // OK",
    "descriptor": "./prepend-as-file.asciidoc:78",
    "id": "prepend-as-file-78",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 77,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-as-file-65",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-as-file.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: prepend-multiple 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type AB = 'a' | 'b';",
    "descriptor": "./prepend-multiple.asciidoc:4",
    "id": "prepend-multiple-4",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 3,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-multiple.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type ABC = AB | 'c';",
    "descriptor": "./prepend-multiple.asciidoc:10",
    "id": "prepend-multiple-10",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 9,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-multiple-4",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-multiple.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const c: ABC = 'c';",
    "descriptor": "./prepend-multiple.asciidoc:15",
    "id": "prepend-multiple-15",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 14,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "prepend-multiple-4",
      },
      {
        "id": "prepend-multiple-10",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "prepend-multiple.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: president 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "declare let hasMiddle: boolean;
const firstLast = {first: 'Harry', last: 'Truman'};
const president = {...firstLast, ...(hasMiddle ? {middle: 'S'} : {})};
//    ^? const president: {
//         first: string;
//         last: string;
//         middle?: string;
//       }",
    "descriptor": "./president.asciidoc:7",
    "id": "president-7",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 6,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "president.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "declare let hasMiddle: boolean;
const firstLast = {first: 'Harry', last: 'Truman'};
const president = {...firstLast, ...(hasMiddle ? {middle: 'S'} : {})};
// Type is { first: string; last: string; middle?: string; }",
    "descriptor": "./president.asciidoc:21",
    "id": "president-21",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 20,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "president.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: program-listing 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "<pre data-type="programlisting">&gt; <strong>x = {}</strong>
{}
&gt; <strong>x[[1, 2, 3]] = 2</strong>
2
&gt; <strong>x</strong>
{ '1,2,3': 2 }</pre>",
    "descriptor": "./program-listing.asciidoc:4",
    "id": "program-listing-4",
    "isTSX": false,
    "language": "node",
    "lineNumber": 3,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "program-listing.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "const place = {name: 'New York', latLng: [41.6868, -74.2692]};
const loc = place.latLng;",
    "descriptor": "./program-listing.asciidoc:17",
    "id": "program-listing-17",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 16,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "program-listing.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "<pre data-type="programlisting">&gt; <strong>loc[0] = 0;</strong>
0
&gt; <strong>place.latLng</strong>
[ 0, -73.979 ]</pre>",
    "descriptor": "./program-listing.asciidoc:24",
    "id": "program-listing-24",
    "isTSX": false,
    "language": "node",
    "lineNumber": 23,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "program-listing-17",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "program-listing.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "<pre data-type="programlisting" data-code-language="javascript">&gt; <strong> RegExp.prototype.monkey = 'Capuchin'</strong>
"Capuchin"
&gt; <strong>/123/.monkey</strong>
"Capuchi"</pre>",
    "descriptor": "./program-listing.asciidoc:40",
    "id": "program-listing-40",
    "isTSX": false,
    "language": "node",
    "lineNumber": 39,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "program-listing-17",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "program-listing.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "<pre data-type="programlisting">&gt; <strong>console.log('hello'); console.log('goodbye');</strong>
hello
goodbye</pre>",
    "descriptor": "./program-listing.asciidoc:49",
    "id": "program-listing-49",
    "isTSX": false,
    "language": "node",
    "lineNumber": 48,
    "nodeModules": [],
    "prefixes": [
      {
        "id": "program-listing-17",
      },
    ],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "program-listing.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: skip 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "keyof A&B = (keyof A) | (keyof B)",
    "descriptor": "./skip.asciidoc:4",
    "id": "skip-4",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 3,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": true,
    "sourceFile": "skip.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;

exports[`extractSamples snapshot: top-level-await 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "declare function get(url: string): Promise<number>;
export async function timeout(ms: number): Promise<never> {
    return new Promise((resolve, reject) => {
        setTimeout(reject, ms);
    });
}

const resource = await Promise.race([get('example.com'), timeout(500)]);
//    ^? const resource: number",
    "descriptor": "./top-level-await.asciidoc:8",
    "id": "top-level-await-8",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 7,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "top-level-await.asciidoc",
    "targetFilename": null,
    "tsOptions": {
      "module": 7,
      "moduleResolution": 2,
      "target": 4,
    },
  },
]
`;

exports[`extractSamples snapshot: twoslash-assertion 1`] = `
[
  {
    "auxiliaryFiles": [],
    "checkJS": false,
    "content": "type T = \`\${number}\`;

const one = 1;
//    ^? const one: 1

const two = 2;  // type is 2",
    "descriptor": "./twoslash-assertion.asciidoc:5",
    "id": "twoslash-assertion-5",
    "isTSX": false,
    "language": "ts",
    "lineNumber": 4,
    "nodeModules": [],
    "prefixes": [],
    "prefixesLength": 0,
    "replacementId": undefined,
    "sectionHeader": null,
    "skip": false,
    "sourceFile": "twoslash-assertion.asciidoc",
    "targetFilename": null,
    "tsOptions": {},
  },
]
`;
