See https://github.com/danvk/literate-ts/issues/40

The `verifier:prepend-as-file` directive tells literate-ts to write code samples to a particular destination file (rather than concatenating them), which lets you verify code that involves `import` statements.

This is a file that will be written out as a module:

// verifier:prepend-as-file:point.ts
[source,ts]
----
// point.ts
export interface Point {
  x: number;
  y: number;
}
----

You can import this from another snippet:

[source,ts]
----
import { Point } from './point';
const pt: Point = {
    x: 3,
    y: 4,
    z: 5,
//  ~ Object literal may only specify known properties, and 'z' does not exist in type 'Point'.
}
----
// verifier:reset

You can also import a JSON file. As a convenience, literate-ts will convert from JSONC (JSON with Comments) to JSON for you:

// verifier:prepend-as-file:data.json
[source,json]
----
// data.json
{
  "year": 2023,
  "months": [
    "Jan",
    "Feb",
    /* ... */
    "Dec"
  ]
}
----

// verifier:tsconfig:resolveJsonModule=true
// verifier:tsconfig:esModuleInterop=true
[source,ts]
----
import data from './data.json';
console.log(data.year);
//               ^? (property) "year": number
console.log(data.months);
//               ^? (property) "months": string[]
----

This also works for "ambient" modules (`.d.ts` files):

// verifier:reset
// verifier:prepend-as-file:ice-cream.d.ts
[source,ts]
----
declare module 'ice-cream' {
  export enum Flavor {
    VANILLA = 'vanilla',
    CHOCOLATE = 'chocolate',
    STRAWBERRY = 'strawberry',
  }

  export function scoop(flavor: Flavor): void;
}
----

[source,ts]
----
import {scoop} from 'ice-cream';

scoop('vanilla');
//    ~~~~~~~~~ '"vanilla"' is not assignable to parameter of type 'Flavor'

import {Flavor} from 'ice-cream';
scoop(Flavor.VANILLA);  // OK
----
